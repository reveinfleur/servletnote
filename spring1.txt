웹 서버
HTTP 기반으로 동작
정적 리소스 제공, 기타 부가기능
정적파일(HTML, CSS, JS, 이미지, 영상)
EX)APACHE

웹 애플리케이션 서버(WAS)
웹 서버 기능 포함
프로그램 코드를 실행해서 애플리케이션 로직 수행(동적)
EX)Tomcat

웹 시스템 구성 - WAS, DB
WAS, DB만으로 시스템 구성 가능
->WAS가 너무 많은 역할을 담당, 서버 과부화 우려, WAS장애시 오류 화면도 노출 불가능

웹 시스템 구성 - WEB, WAS, DB
정적 리소스는 웹 서버가 처리
웹 서버는 어플리케이션 로직같은 동적인 처리가 필요할떄만 WAS에 요청을 위임, 효율적인 리소스 관리

서블릿
비지니스 로직 실행을 제외한 대부분의 기능을 서블릿이 대체해줌
HttpServletRequest : HTTP 요청 정보를 편리하게 사용
HttpServletResponse : HTTP 응답 정보를 편리하게 제공

서블릿컨테이너
서블릿 객체를 자동으로 생성, 호출, 관리
동시 요청을 위한 멀티 쓰레드 지원

동시 요청-멀티 쓰레드
쓰레드 : 애플리케이션 코드를 하나하나 순차적으로 실행하는 것
다중 요청-쓰레드 하나 사용
첫번쨰 요청이 끝날떄까지 두번쨰 요청은 계속 대기(두번쨰 요청은 아예 실행 자체를 못함)
=> 쓰레드를 하나 더 만듬 해결

요청올떄마다 쓰레드를 생성하면 단점
쓰레드 생성 비용은 매우 비싸다
요청이 올 때 마다 쓰레드를 생성하면, 응답 속도가 늦어진다
쓰레드는 컨텍스트 스위칭 비용이 발생한다
쓰레드는 생성에 제한이 없다->많은 요청이 오면 쓰레드가 계속 생성되 메모리 임계점을 넘어 서버가 죽을 수 있다

위의 단점을 해결하기위한 쓰레드 풀
쓰레드 풀에 일정 갯수의 쓰레드를 넣어놓고 쓰고 반납한다
갯수를 넘어간 요청이 발생시 대기, 거절

WAS의 주요 튜닝 포인트는 최대 쓰레드 수이다

!WAS는 멀티쓰레드를 지원해줌, 개발자가 멀티 쓰레드 관련 코드를 신경쓰지 않아도 됨

정적리소스
HTML(동적 리소스)
HTTP API(HTML이 아니라 데이터를 전달, 주로 JSON 형식 사용)
->서버 TO 서버

SSR-서버 사이드 렌더링
서버에서 최종 HTML을 생성해서 클라이언트에 전달
JSP, 타임리프
주로 정적인 화면에 사용

CSR-클라이언트 사이드 렌더링
HTML결과를 자바스크립트를 사용해 웹 브라우저에서 동적으로 생성해서 적용
vue, react
주로 동적인 화면에 사용